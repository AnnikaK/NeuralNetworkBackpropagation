
import java.util.ArrayList;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class Window extends Application {

	private Network net;
	private Fighter fighter;
	private Label statusContent;
	private Label networkError;

	private Button train;
	private Button run;

	private ComboBox<Integer> b1;
	private ComboBox<Integer> b2;
	private ComboBox<Integer> b3;
	private ComboBox<Integer> b4;
	private Label react;
	private ArrayList<ComboBox<Integer>> comboBoxes;

	public static void main(String[] args) {
		launch(args);
	}

	@Override
	public void start(Stage primaryStage) throws Exception {

		setupNetwork();
		fighter = new Fighter(net);

		Pane root = new Pane();
		createWindow(root);
		Scene scene = new Scene(root, 800, 600);
		primaryStage.setScene(scene);
		primaryStage.setTitle("Neuronales Netzwerk");
		primaryStage.show();

		// net.backpropagation_learning(examples);

	}

	// ---------------------------User Interface

	private void createWindow(Pane root) {

		// labels on top
		
		VBox top = new VBox();
		HBox bar = new HBox();
		bar.setSpacing(50);
		top.setSpacing(20);
		top.setPadding(new Insets(20));
		
		
		HBox leftStatus = new HBox();
		leftStatus.setSpacing(20);
		Label status = new Label("Status: ");
		status.setFont(new Font(16));
		statusContent = new Label("untrainiert");
		statusContent.setFont(new Font(16));
		leftStatus.getChildren().addAll(status,statusContent);



		HBox rightStatus = new HBox();
		rightStatus.setSpacing(20);
		Label err = new Label("Netzwerkfehler: ");
		err.setFont(new Font(16));
		networkError = new Label("noch keine Daten vorhanden.");
		networkError.setFont(new Font(16));
		rightStatus.getChildren().addAll(err,networkError);

		
		bar.getChildren().addAll(leftStatus, rightStatus);
		top.getChildren().add(bar);

		train = new Button("Netzwerk trainieren");
		train.setFont(new Font(16));
		train.setLayoutX(20);
		train.setLayoutY(60);
		train.setOnAction((e) -> createLearningThread());
		top.getChildren().add(train);
		
		root.getChildren().add(top);
		
		VBox center = new VBox();
		

		createComboBoxes(center);
		
		

		run = new Button("Netzwerkdurchlauf starten!");
		run.setFont(new Font(16));
		run.setDisable(true);
		run.setOnAction((e) -> createRunningThread());
		run.setLayoutX(20);
		run.setLayoutY(320);
		root.getChildren().add(run);
		
		center.getChildren().add(run);
		
		center.setLayoutX(20);
		center.setLayoutY(120);
		root.getChildren().add(center);

		Label reaction = new Label("Aktion: ");
		reaction.setFont(new Font(16));
		reaction.setLayoutX(360);
		reaction.setLayoutY(140);
		react = new Label("Nichtstun");
		react.setFont(new Font(16));
		react.setLayoutX(360);
		react.setLayoutY(180);
		root.getChildren().addAll(reaction, react);

	}

	private void createComboBoxes(Pane center) {
		
		HBox field = new HBox();
		
		VBox vboxLeft = new VBox();
		VBox vboxRight = new VBox();
		
		
		vboxLeft.setSpacing(20);
		vboxRight.setSpacing(20);
		
		vboxLeft.setPadding(new Insets(20));
		vboxRight.setPadding(new Insets(20));
		
		
		comboBoxes = new ArrayList<>();
		ArrayList<Integer> numbers = new ArrayList<>();
		for (int i = 0; i <= 10; i++) {
			numbers.add(i);
		}

		Label l1 = new Label("Gesundheit: ");
		l1.setFont(new Font(16));
		b1 = new ComboBox<>();
		comboBoxes.add(b1);
		b1.setPromptText("0");
		b1.setValue(0);
		b1.getItems().addAll(numbers);
		b1.setDisable(true);
		

		Label l2 = new Label("Munition: ");
		l2.setFont(new Font(16));
		b2 = new ComboBox<>();
		comboBoxes.add(b2);
		b2.setPromptText("0");
		b2.setValue(0);
		b2.getItems().addAll(numbers);
		b2.setDisable(true);

		Label l3 = new Label("Anzahl Gegner: ");
		l3.setFont(new Font(16));
		b3 = new ComboBox<>();
		comboBoxes.add(b3);
		b3.setPromptText("0");
		b3.setValue(0);
		b3.getItems().addAll(numbers);
		b3.setDisable(true);

		Label l4 = new Label("Anzahl Verbündete: ");
		l4.setFont(new Font(16));
		b4 = new ComboBox<>();
		comboBoxes.add(b4);
		b4.setPromptText("0");
		b4.setValue(0);
		b4.getItems().addAll(numbers);
		b4.setDisable(true);
	
		
		
		vboxLeft.getChildren().addAll(l1,l2,l3,l4);
		vboxRight.getChildren().addAll(comboBoxes);
		
		field.getChildren().addAll(vboxLeft, vboxRight);
		

		center.getChildren().addAll(field);

	}

	private void setupNetwork() {
		int[] structure = { 16, 8, 4 };
		net = new Network(structure, 0.1, 0.1, 1000,7000);

	}

	private void createRunningThread() {
		run.setDisable(true);
		new RunNetworkThread(net, this, fighter);

	}

	private void createLearningThread() {
		train.setDisable(true);
		new LearningThread(net, this, fighter);
	}

	public ArrayList<ComboBox<Integer>> getComboboxes() {
		return comboBoxes;
	}

	public void enableRunningButton() {
		run.setDisable(false);
	}

	public void enableTrainingButton() {
		train.setDisable(false);
	}

	public void enableUserInterface() {
		for (ComboBox<Integer> box : comboBoxes) {
			box.setDisable(false);
		}
		run.setDisable(false);
	}

	public void setErrorLabel(double val) {
		networkError.setText(Double.toString(val));
	}

	public void react(String s) {
		react.setText(s);
	}

	public void setStatus(String string) {
		statusContent.setText(string);
	}

}
